### ============= USUARIOS =============

### Obtener todos los usuarios
GET http://localhost:3000/users

### Crear usuario válido
POST http://localhost:3000/users
Content-Type: application/json

{
  "email": "nuevo@test.com",
  "password": "123456",
  "firstName": "Nuevo",
  "lastName": "Usuario"
}

### Probar validación: Email duplicado (debería dar error)
POST http://localhost:3000/users
Content-Type: application/json

{
  "email": "nuevo@test.com",
  "password": "123456",
  "firstName": "Duplicado",
  "lastName": "Usuario"
}

### Probar validación: Email inválido (debería dar error)
POST http://localhost:3000/users
Content-Type: application/json

{
  "email": "email-malosss",
  "password": "123456",
  "firstName": "Test",
  "lastName": "User"
}

### ============= EQUIPOS =============

### Obtener todos los equipos
GET http://localhost:3000/teams

### Crear equipo válido
POST http://localhost:3000/teams
Content-Type: application/json

{
  "name": "Equipo de Desarrollo",
  "description": "Equipo para desarrollar la aplicación",
  "ownerId": 1
}

### Probar validación: Propietario inexistente (debería dar error)
POST http://localhost:3000/teams
Content-Type: application/json

{
  "name": "Equipo Test",
  "description": "Test",
  "ownerId": 999
}

### ============= TAREAS =============

### Obtener todas las tareas
GET http://localhost:3000/tasks

### Crear tarea válida
POST http://localhost:3000/tasks
Content-Type: application/json

{
  "title": "Configurar base de datos",
  "description": "Setup PostgreSQL y TypeORM",
  "teamId": 1,
  "createdById": 1,
  "assignedToId": 1,
  "priority": "alta",
  "dueDate": "2025-12-31"
}

### VALIDACIÓN: Fecha en el pasado (debería dar error)
POST http://localhost:3000/tasks
Content-Type: application/json

{
  "title": "Tarea con fecha mala",
  "description": "Esta debería fallar",
  "teamId": 1,
  "createdById": 1,
  "dueDate": "2020-01-01"
}

### Crear tarea sin usuario asignado (válido)
POST http://localhost:3000/tasks
Content-Type: application/json

{
  "title": "Tarea sin asignar",
  "description": "Tarea para el equipo",
  "teamId": 1,
  "createdById": 1,
  "priority": "media"
}

### TRANSICIÓN VÁLIDA: Pendiente → En curso
PUT http://localhost:3000/tasks/1/status
Content-Type: application/json

{
  "status": "en_curso"
}

### TRANSICIÓN VÁLIDA: En curso → Finalizada
PUT http://localhost:3000/tasks/1/status
Content-Type: application/json

{
  "status": "finalizada"
}

### TRANSICIÓN INVÁLIDA: Finalizada → Pendiente (debería dar error)
PUT http://localhost:3000/tasks/1/status
Content-Type: application/json

{
  "status": "pendiente"
}

### TRANSICIÓN VÁLIDA: Cualquier estado → Cancelada
PUT http://localhost:3000/tasks/2/status
Content-Type: application/json

{
  "status": "cancelada"
}

### ============= COMENTARIOS =============

### Obtener todos los comentarios
GET http://localhost:3000/comments

### Crear comentario válido
POST http://localhost:3000/comments
Content-Type: application/json

{
  "content": "Excelente trabajo en esta tarea!",
  "taskId": 1,
  "authorId": 1
}

### Crear otro comentario
POST http://localhost:3000/comments
Content-Type: application/json

{
  "content": "Necesitamos revisar algunos detalles",
  "taskId": 1,
  "authorId": 1
}

### Probar validación: Tarea inexistente (debería dar error)
POST http://localhost:3000/comments
Content-Type: application/json

{
  "content": "Comentario en tarea que no existe",
  "taskId": 999,
  "authorId": 1
}

### ============= MEMBRESÍAS =============

### Agregar usuario a equipo
POST http://localhost:3000/memberships
Content-Type: application/json

{
  "userId": 1,
  "teamId": 1,
  "role": "miembro"
}

### Agregar otro usuario al mismo equipo
POST http://localhost:3000/memberships
Content-Type: application/json

{
  "userId": 2,
  "teamId": 1,
  "role": "miembro"
}

### Probar validación: Usuario duplicado en equipo (debería dar error)
POST http://localhost:3000/memberships
Content-Type: application/json

{
  "userId": 1,
  "teamId": 1,
  "role": "propietario"
}

### Probar validación: Usuario inexistente (debería dar error)
POST http://localhost:3000/memberships
Content-Type: application/json

{
  "userId": 999,
  "teamId": 1,
  "role": "miembro"
}

### ============= PRUEBAS DE ELIMINACIÓN =============

### Crear equipo para eliminar (sin tareas)
POST http://localhost:3000/teams
Content-Type: application/json

{
  "name": "Equipo para eliminar",
  "description": "Este equipo se puede eliminar",
  "ownerId": 1
}

### Eliminar equipo sin tareas activas (debería funcionar)
DELETE http://localhost:3000/teams/2

### Intentar eliminar equipo con tareas activas (debería dar error)
DELETE http://localhost:3000/teams/1

### ============= RUTAS BÁSICAS =============

### Verificar que el servidor funciona
GET http://localhost:3000/

### Verificar conexión a BD
GET http://localhost:3000/test-db












